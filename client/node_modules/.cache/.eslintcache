[{"/Users/albertqi/Desktop/Directory/CampusContact/client/src/index.js":"1","/Users/albertqi/Desktop/Directory/CampusContact/client/src/App.js":"2","/Users/albertqi/Desktop/Directory/CampusContact/client/src/components/Footer.js":"3","/Users/albertqi/Desktop/Directory/CampusContact/client/src/components/Table.js":"4","/Users/albertqi/Desktop/Directory/CampusContact/client/src/components/Navbar.js":"5","/Users/albertqi/Desktop/Directory/CampusContact/client/src/pages/About.js":"6","/Users/albertqi/Desktop/Directory/CampusContact/client/src/pages/EditContact.js":"7","/Users/albertqi/Desktop/Directory/CampusContact/client/src/components/Contact.js":"8","/Users/albertqi/Desktop/Directory/CampusContact/client/src/pages/AddContact.js":"9","/Users/albertqi/Desktop/Directory/CampusContact/client/src/components/SearchBar.js":"10","/Users/albertqi/Desktop/Directory/CampusContact/client/src/components/TableHeader.js":"11","/Users/albertqi/Desktop/Directory/CampusContact/client/src/pages/CreateScript.js":"12","/Users/albertqi/Desktop/Directory/CampusContact/client/src/pages/Script.js":"13","/Users/albertqi/Desktop/Directory/CampusContact/client/src/pages/Scripts.js":"14","/Users/albertqi/Desktop/Directory/CampusContact/client/src/components/ScriptCard.js":"15","/Users/albertqi/Desktop/Directory/CampusContact/client/src/components/Tag.js":"16","/Users/albertqi/Desktop/Directory/CampusContact/client/src/pages/EditScript.js":"17","/Users/albertqi/Desktop/Directory/CampusContact/client/src/components/Sidebar.js":"18","/Users/albertqi/Desktop/Directory/CampusContact/client/src/pages/SidebarContainer.js":"19","/Users/albertqi/Desktop/Directory/CampusContact/client/src/pages/TurfSheet.js":"20","/Users/albertqi/Desktop/Directory/CampusContact/client/src/components/TableCell.js":"21"},{"size":237,"mtime":1647304123003,"results":"22","hashOfConfig":"23"},{"size":1350,"mtime":1647827515400,"results":"24","hashOfConfig":"23"},{"size":245,"mtime":1644684690441,"results":"25","hashOfConfig":"23"},{"size":4405,"mtime":1647827540808,"results":"26","hashOfConfig":"23"},{"size":4210,"mtime":1647827974761,"results":"27","hashOfConfig":"23"},{"size":312,"mtime":1647827960271,"results":"28","hashOfConfig":"23"},{"size":6762,"mtime":1647806490464,"results":"29","hashOfConfig":"23"},{"size":1420,"mtime":1647827828490,"results":"30","hashOfConfig":"23"},{"size":6928,"mtime":1647806484457,"results":"31","hashOfConfig":"23"},{"size":849,"mtime":1645064505358,"results":"32","hashOfConfig":"23"},{"size":291,"mtime":1647827561486,"results":"33","hashOfConfig":"23"},{"size":7948,"mtime":1647806850977,"results":"34","hashOfConfig":"23"},{"size":9284,"mtime":1647810228653,"results":"35","hashOfConfig":"23"},{"size":5109,"mtime":1647673685691,"results":"36","hashOfConfig":"23"},{"size":3270,"mtime":1647548192534,"results":"37","hashOfConfig":"23"},{"size":634,"mtime":1647330836297,"results":"38","hashOfConfig":"23"},{"size":8130,"mtime":1647806757721,"results":"39","hashOfConfig":"23"},{"size":5608,"mtime":1647827970464,"results":"40","hashOfConfig":"23"},{"size":242,"mtime":1647674114940,"results":"41","hashOfConfig":"23"},{"size":235,"mtime":1647670495560,"results":"42","hashOfConfig":"23"},{"size":220,"mtime":1647827556325,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"1kl3t69",{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"52"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/Users/albertqi/Desktop/Directory/CampusContact/client/src/index.js",[],[],["119","120"],"/Users/albertqi/Desktop/Directory/CampusContact/client/src/App.js",["121","122"],[],"import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport AddContact from \"./pages/AddContact\";\nimport EditContact from \"./pages/EditContact\";\nimport Scripts from \"./pages/Scripts\";\nimport Script from \"./pages/Script\";\nimport CreateScript from \"./pages/CreateScript\";\nimport EditScript from \"./pages/EditScript\";\nimport Footer from \"./components/Footer\";\nimport About from \"./pages/About\";\nimport SidebarContainer from \"./pages/SidebarContainer\";\nimport TurfSheet from \"./pages/TurfSheet\";\n\nfunction App() {\n\n  const routes = (\n    <Routes>\n      <Route path=\"/\" exact element={<TurfSheet />} />\n      <Route path=\"/dashboard\" exact element={<TurfSheet />} />\n      <Route path=\"/add-contact\" element={<AddContact />} />\n      <Route path=\"/edit-contact\" element={<EditContact />} />\n      <Route path=\"/scripts\" element={<Scripts />} />\n      <Route path=\"/script\" element={<Script />} />\n      <Route path=\"/scripts/create\" element={<CreateScript />} />\n      <Route path=\"/scripts/edit\" element={<EditScript />} />\n      <Route path=\"/about\" element={<About />} />\n    </Routes>\n  );\n\n  return (\n    <Router>\n      {/* <Navbar />{routes} */}\n      <SidebarContainer>{routes}</SidebarContainer>\n      {/* <Footer /> */}\n    </Router>\n  );\n}\n\nexport default App;\n",["123","124"],"/Users/albertqi/Desktop/Directory/CampusContact/client/src/components/Footer.js",[],[],"/Users/albertqi/Desktop/Directory/CampusContact/client/src/components/Table.js",["125","126"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport Contact from \"./Contact\";\nimport TableHeader from \"./TableHeader\";\n\nfunction Table() {\n  const [contacts, setContacts] = useState([]);\n\n  // const fields = [\"Last Name\", \"First Name\", \"Email\", \"Phone Number\", \"House/Yard\", \"Suite\",\n  //   \"Mailbox Center\", \"Mailbox Number\", \"Class Year\", \"Home City\", \"Home State\",\n  //   \"Contact Status\", \"PTV Status\", \"Registration Status\", \"Stage of Voting Process\", \"Actions\"];\n\n  const fields = [\"Student Information\", \"Contact\", \"Hometown\", \"Mailbox\",\n    \"Status\", \"\"];\n\n  // Get all contacts\n  const getContacts = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8000/contacts\");\n      const jsonData = await response.json();\n\n      setContacts(jsonData);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  // Delete contact\n  const deleteContact = async (id) => {\n    if (window.confirm(\"Are you sure you want to delete this contact?\")) {\n      try {\n        const response = await fetch(`http://localhost:8000/contacts/${id}`, {\n          method: \"DELETE\"\n        });\n\n        setContacts(contacts.filter(contact => contact.id !== id));\n      } catch (error) {\n        console.error(error.message);\n      }\n    }\n  };\n\n  // const showDropdown = true;\n\n  useEffect(() => {\n    getContacts();\n  }, []);\n\n  return (\n    <>\n      {contacts.length > 0 ? (\n        <div className=\"flex flex-col m-6 overflow-x-hidden\">\n          <div className=\"overflow-x-hidden sm:-mx-6 lg:-mx-8\">\n            <div className=\"inline-block min-w-full sm:px-6 lg:px-8\">\n              <div className=\"overflow-hidden shadow-md sm:rounded-lg\">\n                <table className=\"min-w-full\">\n                  <thead className=\"bg-gray-100 dark:bg-gray-700\">\n                    <tr>\n                      {fields.map((field) => field === \"Status\" ? (\n                        <th key={field} scope=\"col\" className=\"w-64 py-3 pl-4 text-xs font-medium tracking-wider text-left text-gray-700 uppercase dark:text-gray-400\">\n                          <a role=\"button\" id=\"dropdownButton\" className=\"inline-flex items-center\">Status\n                            <svg className=\"ml-1 w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" /></svg>\n                          </a>\n                          {/* {showDropdown ? (\n                            <ul className=\"dropdown-menu mt-3 py-2 min-w-max absolute bg-white text-base z-50 float-left text-left rounded-lg shadow-lg mt-1\" aria-labelledby=\"dropdownButton\">\n                              <li>\n                                <a href=\"#\" className=\"block py-2 px-4 text-sm text-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 dark:text-gray-200 dark:hover:text-white\">Dashboard</a>\n                              </li>\n                              <li>\n                                <a href=\"#\" className=\"block py-2 px-4 text-sm text-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 dark:text-gray-200 dark:hover:text-white\">Settings</a>\n                              </li>\n                              <li>\n                                <a href=\"#\" className=\"block py-2 px-4 text-sm text-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 dark:text-gray-200 dark:hover:text-white\">Earnings</a>\n                              </li>\n                              <li>\n                                <a href=\"#\" className=\"block py-2 px-4 text-sm text-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 dark:text-gray-200 dark:hover:text-white\">Sign out</a>\n                              </li>\n                            </ul>) : <></>} */}\n                        </th>\n                      ) : (\n                        <TableHeader key={field} content={field} />\n                      ))}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {contacts.map((contact) => (\n                      <Contact key={contact.id} contact={contact} onDelete={deleteContact} />\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <h4 className=\"m-3\">No Contacts</h4>\n      )\n      }\n    </>\n  );\n}\n\nexport default Table;\n","/Users/albertqi/Desktop/Directory/CampusContact/client/src/components/Navbar.js",[],[],"/Users/albertqi/Desktop/Directory/CampusContact/client/src/pages/About.js",[],[],"/Users/albertqi/Desktop/Directory/CampusContact/client/src/pages/EditContact.js",["127"],[],"import { useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\n\nfunction EditContact() {\n  const navigate = useNavigate();\n  const initialContact = useLocation().state;\n\n  const [contact, setContact] = useState(initialContact);\n\n  // Update contact state on input change\n  const inputChange = (e) => {\n    const { name, value } = e.target;\n    setContact({\n      ...contact,\n      [name]: value,\n    });\n  };\n\n  // Update contact\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await fetch(\n        `http://localhost:8000/edit-contact/${contact.id}`,\n        {\n          method: \"PUT\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(contact)\n        }\n      );\n      navigate(\"/\");\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <div className=\"form-group m-3\">\n        <label>Last Name</label>\n        <input\n          type=\"text\"\n          placeholder=\"Last Name\"\n          name=\"last_name\"\n          value={contact.last_name}\n          onChange={inputChange}\n          className=\"form-control\"\n        ></input>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>First Name</label>\n        <input\n          type=\"text\"\n          placeholder=\"First Name\"\n          name=\"first_name\"\n          value={contact.first_name}\n          onChange={inputChange}\n          className=\"form-control\"\n        ></input>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>Email</label>\n        <input\n          type=\"email\"\n          placeholder=\"Email\"\n          name=\"email\"\n          value={contact.email}\n          onChange={inputChange}\n          className=\"form-control\"\n        ></input>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>Phone Number</label>\n        <input\n          type=\"tel\"\n          placeholder=\"Phone Number\"\n          name=\"phone_number\"\n          value={contact.phone_number}\n          onChange={inputChange}\n          className=\"form-control\"\n        ></input>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>House/Yard</label>\n        <input\n          type=\"text\"\n          placeholder=\"House/Yard\"\n          name=\"house\"\n          value={contact.house}\n          onChange={inputChange}\n          className=\"form-control\"\n        ></input>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>Suite</label>\n        <input\n          type=\"text\"\n          placeholder=\"Suite\"\n          name=\"suite\"\n          value={contact.suite}\n          onChange={inputChange}\n          className=\"form-control\"\n        ></input>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>Mailbox Center</label>\n        <input\n          type=\"text\"\n          placeholder=\"Mailbox Center\"\n          name=\"mailbox_center\"\n          value={contact.mailbox_center}\n          onChange={inputChange}\n          className=\"form-control\"\n        ></input>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>Mailbox Number</label>\n        <input\n          type=\"text\"\n          placeholder=\"Mailbox Number\"\n          name=\"mailbox_number\"\n          value={contact.mailbox_number}\n          onChange={inputChange}\n          className=\"form-control\"\n        ></input>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>Class Year</label>\n        <select\n          name=\"class_year\"\n          value={contact.class_year}\n          onChange={inputChange}\n          className=\"form-control\"\n        >\n          <option value=\"First-Year\">First-Year</option>\n          <option value=\"Sophomore\">Sophomore</option>\n          <option value=\"Junior\">Junior</option>\n          <option value=\"Senior\">Senior</option>\n        </select>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>Home City</label>\n        <input\n          type=\"text\"\n          placeholder=\"Home City\"\n          name=\"city\"\n          value={contact.city}\n          onChange={inputChange}\n          className=\"form-control\"\n        ></input>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>Home State</label>\n        <input\n          type=\"text\"\n          placeholder=\"Home State\"\n          name=\"state\"\n          value={contact.state}\n          onChange={inputChange}\n          className=\"form-control\"\n        ></input>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>Contact Status</label>\n        <select\n          name=\"contact_status\"\n          value={contact.contact_status}\n          onChange={inputChange}\n          className=\"form-control\"\n        >\n          <option value=\"Contacted\">Contacted</option>\n          <option value=\"No Response\">\n            No Response\n          </option>\n          <option value=\"Not Contacted\">Not Contacted</option>\n        </select>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>PTV Status</label>\n        <select\n          name=\"ptv_status\"\n          value={contact.ptv_status}\n          onChange={inputChange}\n          className=\"form-control\"\n        >\n          <option value=\"Full PTV Completed\">Full PTV Completed</option>\n          <option value=\"Short PTV Completed\">\n            Short PTV Completed\n          </option>\n          <option value=\"Not Completed\">Not Completed</option>\n        </select>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>Registration Status</label>\n        <select\n          name=\"registration_status\"\n          value={contact.registration_status}\n          onChange={inputChange}\n          className=\"form-control\"\n        >\n          <option value=\"Registered\">Registered</option>\n          <option value=\"In Progress\">\n            In Progress\n          </option>\n          <option value=\"Not Registered\">Not Registered</option>\n        </select>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>Stage of Voting Process</label>\n        <select\n          name=\"stage_of_voting_process\"\n          value={contact.stage_of_voting_process}\n          onChange={inputChange}\n          className=\"form-control\"\n        >\n          <option value=\"Voted In Person\">Voted In Person</option>\n          <option value=\"Submitted Absentee Ballot\">\n            Submitted Absentee Ballot\n          </option>\n          <option value=\"Plan To Vote In Person\">Plan To Vote In Person</option>\n          <option value=\"Requested Absentee Ballot\">\n            Requested Absentee Ballot\n          </option>\n          <option value=\"Unknown\">Unknown</option>\n        </select>\n      </div>\n\n      <input type=\"submit\" value=\"Save\" className=\"ml-3 btn btn-outline-primary\" />\n    </form>\n  );\n}\n\nexport default EditContact;\n","/Users/albertqi/Desktop/Directory/CampusContact/client/src/components/Contact.js",["128"],[],"import \"./Contact.css\";\nimport { useNavigate } from \"react-router\";\nimport TableCell from \"./TableCell\";\n\nfunction Contact({ contact, onDelete }) {\n  const navigate = useNavigate();\n\n  const { last_name, first_name, email, phone_number, house, suite, mailbox_center, mailbox_number,\n    class_year, city, state, contact_status, ptv_status, registration_status, stage_of_voting_process } =\n    contact;\n\n  const arr = [(<>{last_name}, {first_name}<br />{house}, {suite}</>),\n  (<>{email}<br />{phone_number}</>),\n  (<>{city}, {state}</>),\n  (<>{mailbox_center} {mailbox_number}</>),\n  (<>{contact_status}<br />{ptv_status}<br />{registration_status}<br />{stage_of_voting_process}</>)];\n\n  return (\n    <tr className=\"border-b odd:bg-white even:bg-gray-50 odd:dark:bg-gray-800 even:dark:bg-gray-700 dark:border-gray-600\">\n      {arr.map((field, index) => (\n        // <td key={index} className=\"py-4 px-6 text-sm text-gray-500 whitespace-nowrap dark:text-gray-400\">{field}</td>\n        <TableCell key={index}>{field}</TableCell>\n      ))}\n      <td className=\"py-3 pl-4 text-sm text-gray-500 whitespace-nowrap dark:text-gray-400\">\n        <i\n          className=\"fas fa-edit mr-1\"\n          onClick={() => {\n            navigate(\"/edit-contact\", { state: contact });\n          }}\n        />\n        <i className=\"fas fa-trash\" onClick={() => onDelete(contact.id)} />\n      </td>\n    </tr>\n  );\n}\n\nexport default Contact;\n","/Users/albertqi/Desktop/Directory/CampusContact/client/src/pages/AddContact.js",["129"],[],"import { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction AddContact() {\n  const navigate = useNavigate();\n\n  const [contact, setContact] = useState({\n    \"class_year\": \"First-Year\",\n    \"contact_status\": \"Not Contacted\",\n    \"ptv_status\": \"Not Completed\",\n    \"registration_status\": \"Not Registered\",\n    \"stage_of_voting_process\": \"Unknown\"\n  });\n\n  // Update contact state on input change\n  const inputChange = (e) => {\n    const { name, value } = e.target;\n    setContact({\n      ...contact,\n      [name]: value,\n    });\n  };\n\n  // Add contact\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await fetch(\n        \"http://localhost:8000/add-contact/\",\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(contact)\n        }\n      );\n      navigate(\"/\");\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <div className=\"form-group m-3\">\n        <label>Last Name</label>\n        <input\n          type=\"text\"\n          placeholder=\"Last Name\"\n          name=\"last_name\"\n          value={contact.last_name || \"\"}\n          onChange={inputChange}\n          className=\"form-control\"\n        ></input>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>First Name</label>\n        <input\n          type=\"text\"\n          placeholder=\"First Name\"\n          name=\"first_name\"\n          value={contact.first_name || \"\"}\n          onChange={inputChange}\n          className=\"form-control\"\n        ></input>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>Email</label>\n        <input\n          type=\"email\"\n          placeholder=\"Email\"\n          name=\"email\"\n          value={contact.email || \"\"}\n          onChange={inputChange}\n          className=\"form-control\"\n        ></input>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>Phone Number</label>\n        <input\n          type=\"tel\"\n          placeholder=\"Phone Number\"\n          name=\"phone_number\"\n          value={contact.phone_number || \"\"}\n          onChange={inputChange}\n          className=\"form-control\"\n        ></input>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>House/Yard</label>\n        <input\n          type=\"text\"\n          placeholder=\"House/Yard\"\n          name=\"house\"\n          value={contact.house || \"\"}\n          onChange={inputChange}\n          className=\"form-control\"\n        ></input>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>Suite</label>\n        <input\n          type=\"text\"\n          placeholder=\"Suite\"\n          name=\"suite\"\n          value={contact.suite || \"\"}\n          onChange={inputChange}\n          className=\"form-control\"\n        ></input>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>Mailbox Center</label>\n        <input\n          type=\"text\"\n          placeholder=\"Mailbox Center\"\n          name=\"mailbox_center\"\n          value={contact.mailbox_center || \"\"}\n          onChange={inputChange}\n          className=\"form-control\"\n        ></input>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>Mailbox Number</label>\n        <input\n          type=\"text\"\n          placeholder=\"Mailbox Number\"\n          name=\"mailbox_number\"\n          value={contact.mailbox_number || \"\"}\n          onChange={inputChange}\n          className=\"form-control\"\n        ></input>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>Class Year</label>\n        <select\n          name=\"class_year\"\n          value={contact.class_year}\n          onChange={inputChange}\n          className=\"form-control\"\n        >\n          <option value=\"First-Year\">First-Year</option>\n          <option value=\"Sophomore\">Sophomore</option>\n          <option value=\"Junior\">Junior</option>\n          <option value=\"Senior\">Senior</option>\n        </select>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>Home City</label>\n        <input\n          type=\"text\"\n          placeholder=\"Home City\"\n          name=\"city\"\n          value={contact.city || \"\"}\n          onChange={inputChange}\n          className=\"form-control\"\n        ></input>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>Home State</label>\n        <input\n          type=\"text\"\n          placeholder=\"Home State\"\n          name=\"state\"\n          value={contact.state || \"\"}\n          onChange={inputChange}\n          className=\"form-control\"\n        ></input>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>Contact Status</label>\n        <select\n          name=\"contact_status\"\n          value={contact.contact_status}\n          onChange={inputChange}\n          className=\"form-control\"\n        >\n          <option value=\"Contacted\">Contacted</option>\n          <option value=\"No Response\">\n            No Response\n          </option>\n          <option value=\"Not Contacted\">Not Contacted</option>\n        </select>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>PTV Status</label>\n        <select\n          name=\"ptv_status\"\n          value={contact.ptv_status}\n          onChange={inputChange}\n          className=\"form-control\"\n        >\n          <option value=\"Full PTV Completed\">Full PTV Completed</option>\n          <option value=\"Short PTV Completed\">\n            Short PTV Completed\n          </option>\n          <option value=\"Not Completed\">Not Completed</option>\n        </select>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>Registration Status</label>\n        <select\n          name=\"registration_status\"\n          value={contact.registration_status}\n          onChange={inputChange}\n          className=\"form-control\"\n        >\n          <option value=\"Registered\">Registered</option>\n          <option value=\"In Progress\">\n            In Progress\n          </option>\n          <option value=\"Not Registered\">Not Registered</option>\n        </select>\n      </div>\n      <div className=\"form-group m-3\">\n        <label>Stage of Voting Process</label>\n        <select\n          name=\"stage_of_voting_process\"\n          value={contact.stage_of_voting_process}\n          onChange={inputChange}\n          className=\"form-control\"\n        >\n          <option value=\"Voted In Person\">Voted In Person</option>\n          <option value=\"Submitted Absentee Ballot\">\n            Submitted Absentee Ballot\n          </option>\n          <option value=\"Plan To Vote In Person\">Plan To Vote In Person</option>\n          <option value=\"Requested Absentee Ballot\">\n            Requested Absentee Ballot\n          </option>\n          <option value=\"Unknown\">Unknown</option>\n        </select>\n      </div>\n\n      <input type=\"submit\" value=\"Save\" className=\"ml-3 btn btn-outline-primary\" />\n    </form>\n  );\n}\n\nexport default AddContact;\n","/Users/albertqi/Desktop/Directory/CampusContact/client/src/components/SearchBar.js",[],[],"/Users/albertqi/Desktop/Directory/CampusContact/client/src/components/TableHeader.js",[],[],"/Users/albertqi/Desktop/Directory/CampusContact/client/src/pages/CreateScript.js",["130","131"],[],"import { React } from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport Tag from \"../components/Tag\";\n\nfunction CreateScript() {\n    const navigate = useNavigate();\n\n    const [script, setScript] = useState({ \"body\": \"\" });\n    const [tagsInput, setTagsInput] = useState(\"\");\n    const [tags, setTags] = useState([]);\n\n    const fieldNames = [\"First Name\", \"Last Name\", \"House\", \"Suite\", \"Class Year\",\n        \"City\", \"State\", \"Contact Status\", \"PTV Status\", \"Registration Status\", \"Stage of Voting Process\"];\n    const fieldValues = [\"{first_name}\", \"{last_name}\", \"{house}\", \"{suite}\", \"{class_year}\",\n        \"{city}\", \"{state}\", \"{contact_status}\", \"{ptv_status}\", \"{registration_status}\", \"{stage_of_voting_process}\"];\n\n    // Update script state on input change\n    const inputChange = (e) => {\n        const { name, value } = e.target;\n        setScript({\n            ...script,\n            [name]: value,\n        });\n    };\n\n    // Handle field\n    const handleField = async (e) => {\n        const name = e.target.innerHTML;\n        const scriptElement = document.getElementById(\"scriptBody\");\n        const start = scriptElement.selectionStart, end = scriptElement.selectionEnd;\n        const value = fieldValues[fieldNames.indexOf(name)];\n\n        const update = script.body.slice(0, start) + value + script.body.slice(end);\n\n        await setScript({\n            ...script,\n            body: update,\n        });\n\n        updateCaret(end + value.length);\n    };\n\n    // Update caret position\n    const updateCaret = (i) => {\n        const scriptElement = document.getElementById(\"scriptBody\");\n        scriptElement.focus();\n        scriptElement.setSelectionRange(i, i);\n    };\n\n    // Handle tags input change\n    const tagsInputChange = (e) => {\n        const { value } = e.target;\n        setTagsInput(value);\n    };\n\n    // Handle enter key on tags\n    const handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            const { value } = e.target;\n            if (!tags.includes(value) && value.length > 0) {\n                setTags([\n                    ...tags, value\n                ]);\n                setTagsInput(\"\");\n            }\n        }\n    };\n\n    // Delete tag\n    const deleteTag = async (value) => {\n        setTags(tags.filter(tag => tag !== value));\n    };\n\n    // Form validation\n    const validate = () => {\n        let required = [script.title, script.description, script.timeline, script.body];\n        for (const i of required) {\n            if (i == null || i.length < 1) return false;\n        }\n        return true;\n    };\n\n    // Create script\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        if (!validate()) return;\n        try {\n            const response = await fetch(\n                \"http://localhost:8000/scripts/create/\",\n                {\n                    method: \"POST\",\n                    headers: { \"Content-Type\": \"application/json\" },\n                    body: JSON.stringify(script)\n                }\n            );\n            navigate(\"/scripts\");\n        } catch (error) {\n            console.error(error.message);\n        }\n    };\n\n    useEffect(() => {\n        setScript({\n            ...script,\n            tags: tags,\n        });\n    }, [tags]);\n\n    return (\n        <form>\n            <div className=\"m-6 mb-0 bg-white rounded-lg border dark:border-gray-700 dark:bg-gray-800\">\n                <h5 className=\"m-3 text-2xl font-semibold tracking-tight text-gray-900 dark:text-white\">Create Script</h5>\n            </div>\n            <div className=\"p-6\">\n                <div className=\"mb-4\">\n                    <label className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Title</label>\n                    <input type=\"text\" name=\"title\" value={script.title || \"\"} onChange={inputChange} className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" required />\n                </div>\n                <div className=\"mb-4\">\n                    <label className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Description</label>\n                    <input type=\"text\" name=\"description\" value={script.description || \"\"} onChange={inputChange} className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" required />\n                </div>\n                <div className=\"mb-4\">\n                    <label className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Timeline</label>\n                    <input type=\"date\" name=\"timeline\" value={script.timeline || \"\"} onChange={inputChange} className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" required />\n                </div>\n                <div className=\"mb-4\">\n                    <label className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Tags (optional)</label>\n                    <input type=\"text\" name=\"tags\" value={tagsInput || \"\"} onChange={tagsInputChange} onKeyDown={handleKeyDown} className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" required />\n                    <p className=\"mt-2 text-sm text-gray-500 dark:text-gray-400\">Click 'Enter' to add tags.</p>\n                    {tags.map((tag) => (\n                        <Tag key={tag} value={tag} onDelete={deleteTag} />\n                    ))}\n                </div>\n                <div>\n                    <label className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-400\">Script</label>\n                    <textarea id=\"scriptBody\" type=\"text\" name=\"body\" value={script.body} onChange={inputChange} rows={4} className=\"block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" placeholder=\"Write your script here...\" required />\n                </div>\n                {fieldNames.map((field) => (\n                    <button key={field} onClick={handleField} type=\"button\" className=\"mt-2 mr-2 inline-flex items-center bg-blue-100 hover:bg-blue-200 text-blue-800 text-sm font-medium px-1.5 py-0.5 rounded dark:bg-blue-200 dark:text-blue-800 dark:hover:bg-blue-300\">\n                        {field}\n                    </button>\n                ))}\n            </div>\n\n            <div className=\"pl-6 pb-6\">\n                <button type=\"button\" onClick={onSubmit} className=\"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\">Create</button>\n                <Link to=\"/scripts\">\n                    <button type=\"reset\" className=\"absolute right-6 text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900\">Discard</button>\n                </Link>\n            </div>\n        </form>\n    );\n}\n\nexport default CreateScript;\n","/Users/albertqi/Desktop/Directory/CampusContact/client/src/pages/Script.js",["132","133","134","135","136"],[],"import { useEffect, useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport './Script.css';\n\nfunction Script() {\n    const navigate = useNavigate();\n    const initialScript = useLocation().state;\n\n    const [script, setScript] = useState(initialScript);\n    const [contacts, setContacts] = useState([]);\n    const [contactIndex, setContactIndex] = useState(0);\n    const [replacedBody, setReplacedBody] = useState(\"\");\n\n    const contactFieldNames = [\"First Name\", \"Last Name\", \"House/Yard\", \"Suite\", \"Class Year\",\n        \"Home City\", \"Home State\", \"Contact Status\", \"PTV Status\", \"Registration Status\", \"Stage of Voting Process\"];\n\n    // Update contacts state on input change\n    const inputChange = async (e) => {\n        const { name, value } = e.target;\n        let contactsCopy = [...contacts];\n        contactsCopy[contactIndex][name] = value;\n        await setContacts(contactsCopy);\n        submit();\n    };\n\n    // Update contact\n    const submit = async () => {\n        try {\n            const response = await fetch(\n                `http://localhost:8000/edit-contact/${contacts[contactIndex].id}`,\n                {\n                    method: \"PUT\",\n                    headers: { \"Content-Type\": \"application/json\" },\n                    body: JSON.stringify(contacts[contactIndex])\n                }\n            );\n        } catch (error) {\n            console.error(error.message);\n        }\n    };\n\n    // Get all contacts\n    const getContacts = async () => {\n        try {\n            const response = await fetch(\"http://localhost:8000/contacts\");\n            const jsonData = await response.json();\n\n            setContacts(jsonData);\n        } catch (err) {\n            console.error(err.message);\n        }\n    };\n\n    // Update script body\n    const updateBody = () => {\n        var updatedBody = script.body;\n        if (contacts[contactIndex] == null) return;\n        const { first_name, last_name, house, suite, class_year, city, state,\n            contact_status, ptv_status, registration_status, stage_of_voting_process } =\n            contacts[contactIndex];\n        const arr = [first_name, last_name, house, suite, class_year, city, state,\n            contact_status, ptv_status, registration_status, stage_of_voting_process];\n        const fieldValues = [\"{first_name}\", \"{last_name}\", \"{house}\", \"{suite}\", \"{class_year}\",\n            \"{city}\", \"{state}\", \"{contact_status}\", \"{ptv_status}\", \"{registration_status}\", \"{stage_of_voting_process}\"];\n        for (let i = 0; i < fieldValues.length; i++) {\n            updatedBody = updatedBody.replaceAll(fieldValues[i], arr[i]);\n        }\n        setReplacedBody(updatedBody);\n    };\n\n    // Get information regarding current contact\n    const getContactInfo = () => {\n        if (contacts[contactIndex] == null) return [];\n        const { first_name, last_name, house, suite, class_year, city, state,\n            contact_status, ptv_status, registration_status, stage_of_voting_process } =\n            contacts[contactIndex];\n        const arr = [first_name, last_name, house, suite, class_year, city, state,\n            contact_status, ptv_status, registration_status, stage_of_voting_process];\n        return arr;\n    }\n\n    // Previous contact\n    const prev = () => {\n        if (contactIndex - 1 < 0) return;\n        setContactIndex(contactIndex - 1);\n    }\n\n    // Next contact\n    const next = () => {\n        if (contactIndex + 1 >= contacts.length) return;\n        setContactIndex(contactIndex + 1);\n    };\n\n    useEffect(() => {\n        getContacts();\n    }, []);\n\n    useEffect(() => {\n        updateBody();\n    }, [contactIndex]);\n\n    useEffect(() => {\n        updateBody();\n    }, [contacts]);\n\n    return (\n        <div className=\"p-6\">\n            <div className=\"inline-flex w-full\">\n                <div className=\"p-6 mr-6 w-full bg-white rounded-lg border border-gray-200 dark:bg-gray-800 dark:border-gray-700\">\n                    <p className=\"script text-lg\">{replacedBody}</p>\n                </div>\n                <div className=\"p-6 w-fit whitespace-nowrap bg-white rounded-lg border border-gray-200 dark:bg-gray-800 dark:border-gray-700\">\n                    {contactFieldNames.map((field, index) => (\n                        <p key={field}>{field}: {getContactInfo()[index]}</p>\n                    ))}\n                </div>\n            </div>\n            <div className=\"p-6 my-6 w-full bg-white rounded-lg border border-gray-200 dark:bg-gray-800 dark:border-gray-700\">\n                <label htmlFor=\"contactStatus\" className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-400\">Contact Status</label>\n                <select name=\"contact_status\" id=\"contactStatus\" onChange={inputChange} value={contacts[contactIndex] == null ? \"\" : contacts[contactIndex].contact_status} className=\"mb-4 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\">\n                    <option>Contacted</option>\n                    <option>No Response</option>\n                    <option>Not Contacted</option>\n                </select>\n                <label htmlFor=\"ptvStatus\" className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-400\">PTV Status</label>\n                <select name=\"ptv_status\" id=\"ptvStatus\" onChange={inputChange} value={contacts[contactIndex] == null ? \"\" : contacts[contactIndex].ptv_status} className=\"mb-4 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\">\n                    <option>Full PTV Completed</option>\n                    <option>Short PTV Completed</option>\n                    <option>Not Completed</option>\n                </select>\n                <label htmlFor=\"registrationStatus\" className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-400\">Registration Status</label>\n                <select name=\"registration_status\" id=\"registrationStatus\" onChange={inputChange} value={contacts[contactIndex] == null ? \"\" : contacts[contactIndex].registration_status} className=\"mb-4 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\">\n                    <option>Registered</option>\n                    <option>In Progress</option>\n                    <option>Not Registered</option>\n                </select>\n                <label htmlFor=\"stageOfVotingProcess\" className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-400\">Stage of Voting Process</label>\n                <select name=\"stage_of_voting_process\" id=\"stageOfVotingProcess\" onChange={inputChange} value={contacts[contactIndex] == null ? \"\" : contacts[contactIndex].stage_of_voting_process} className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\">\n                    <option>Voted In Person</option>\n                    <option>Submitted Absentee Ballot</option>\n                    <option>Plan To Vote In Person</option>\n                    <option>Requested Absentee Ballot</option>\n                    <option>Unknown</option>\n                </select>\n            </div>\n\n            <div className=\"inline-flex mb-6 items-center\">\n                <button type=\"button\" onClick={prev} className=\"relative left-0 text-blue-700 inline-flex items-center hover:text-white border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm pl-1.5 pr-3.5 py-2.5 text-center dark:border-blue-500 dark:text-blue-500 dark:hover:text-white dark:hover:bg-blue-600 dark:focus:ring-blue-800\">\n                    <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" /></svg>Previous\n                </button>\n                <p className=\"w-48 absolute left-64 right-0 mx-auto text-center\">{contactIndex + 1} of {contacts.length}</p>\n                <button type=\"button\" onClick={next} className=\"absolute right-6 text-white inline-flex items-center bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm pl-4 pr-2.5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\">Next\n                    <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" /></svg>\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default Script;\n","/Users/albertqi/Desktop/Directory/CampusContact/client/src/pages/Scripts.js",["137","138","139","140","141"],[],"import { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation, Link } from \"react-router-dom\";\nimport ScriptCard from \"../components/ScriptCard\";\n\nfunction Scripts() {\n    const [scripts, setScripts] = useState([]);\n\n    // Get all scripts\n    const getScripts = async () => {\n        try {\n            const response = await fetch(\"http://localhost:8000/scripts\");\n            const jsonData = await response.json();\n\n            setScripts(jsonData);\n        } catch (err) {\n            console.error(err.message);\n        }\n    };\n\n    // Delete script\n    const deleteScript = async (id) => {\n        if (window.confirm(\"Are you sure you want to delete this script?\")) {\n            try {\n                const response = await fetch(`http://localhost:8000/scripts/${id}`, {\n                    method: \"DELETE\"\n                });\n\n                setScripts(scripts.filter(script => script.id !== id));\n            } catch (error) {\n                console.error(error.message);\n            }\n        }\n    };\n\n    // Order by time created\n    const orderByTimeCreated = () => {\n        console.log(\"hi\");\n    }\n\n    useEffect(() => {\n        getScripts();\n    }, []);\n\n    return (\n        <>\n            <div className=\"p-6 inline-flex items-center\">\n                <div className=\"flex relative\">\n                    <div className=\"flex absolute inset-y-0 left-0 items-center pl-3 pointer-events-none\">\n                        <svg className=\"w-5 h-5 text-gray-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fillRule=\"evenodd\" d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\" clipRule=\"evenodd\" /></svg>\n                    </div>\n                    <input type=\"search\" id=\"search\" className=\"p-2 pl-10 text-gray-900 bg-gray-50 rounded-lg border border-gray-300 sm:text-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" placeholder=\"Search\" />\n                </div>\n\n                <div>\n                    <button id=\"dropdownButton\" data-dropdown-toggle=\"dropdown\" className=\"text-gray-900 bg-white border border-gray-300 hover:bg-gray-100 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:bg-gray-600 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-700 dark:focus:ring-gray-800\" type=\"button\">Order By<svg className=\"ml-2 w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" /></svg></button>\n                    {/* Dropdown menu */}\n                    <div id=\"dropdown\" className=\"hidden z-10 w-44 text-base list-none bg-white rounded divide-y divide-gray-100 shadow dark:bg-gray-700\">\n                        <ul className=\"py-1\" aria-labelledby=\"dropdownButton\">\n                            <li>\n                                <a href=\"\" className=\"block py-2 px-4 text-sm text-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 dark:text-gray-200 dark:hover:text-white\">Last Modified</a>\n                            </li>\n                            <li>\n                                <button id=\"orderByTimeCreated\" onClick={orderByTimeCreated} type=\"button\" className=\"w-full text-left py-2 px-4 text-sm text-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 dark:text-gray-200 dark:hover:text-white\">\n                                    <span className=\"inline-flex items-center\">\n                                        Time Created\n                                        <svg className=\"w-5 h-5 absolute right-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 10l7-7m0 0l7 7m-7-7v18\" /></svg>\n                                    </span>\n                                </button>\n                            </li>\n                            <li>\n                                <a href=\"#\" className=\"block py-2 px-4 text-sm text-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 dark:text-gray-200 dark:hover:text-white\">Alphabetical</a>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n\n                <Link to=\"/scripts/create\">\n                    <button type=\"button\" className=\"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\">Create Script</button>\n                </Link>\n            </div>\n\n            <div className=\"text-center\">\n                {scripts.map((script) => (\n                    <ScriptCard key={script.id} script={script} onDelete={deleteScript} />\n                ))}\n            </div>\n        </>\n    );\n}\n\nexport default Scripts;\n","/Users/albertqi/Desktop/Directory/CampusContact/client/src/components/ScriptCard.js",[],[],["142","143"],"/Users/albertqi/Desktop/Directory/CampusContact/client/src/components/Tag.js",[],[],"/Users/albertqi/Desktop/Directory/CampusContact/client/src/pages/EditScript.js",["144","145"],[],"import { React } from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useNavigate, Link, useLocation } from \"react-router-dom\";\nimport Tag from \"../components/Tag\";\n\nfunction EditScript() {\n    const navigate = useNavigate();\n    const initialScript = useLocation().state;\n\n    const [script, setScript] = useState({\n        ...initialScript,\n        timeline: initialScript.timeline.slice(0, initialScript.timeline.indexOf('T'))\n    });\n    const [tagsInput, setTagsInput] = useState(\"\");\n    const [tags, setTags] = useState(initialScript.tags);\n\n    const fieldNames = [\"First Name\", \"Last Name\", \"House\", \"Suite\", \"Class Year\",\n        \"City\", \"State\", \"Contact Status\", \"PTV Status\", \"Registration Status\", \"Stage of Voting Process\"];\n    const fieldValues = [\"{first_name}\", \"{last_name}\", \"{house}\", \"{suite}\", \"{class_year}\",\n        \"{city}\", \"{state}\", \"{contact_status}\", \"{ptv_status}\", \"{registration_status}\", \"{stage_of_voting_process}\"];\n\n    // Update script state on input change\n    const inputChange = (e) => {\n        const { name, value } = e.target;\n        setScript({\n            ...script,\n            [name]: value,\n        });\n    };\n\n    // Handle field\n    const handleField = async (e) => {\n        const name = e.target.innerHTML;\n        const scriptElement = document.getElementById(\"scriptBody\");\n        const start = scriptElement.selectionStart, end = scriptElement.selectionEnd;\n        const value = fieldValues[fieldNames.indexOf(name)];\n\n        const update = script.body.slice(0, start) + value + script.body.slice(end);\n\n        await setScript({\n            ...script,\n            body: update,\n        });\n\n        updateCaret(end + value.length);\n    };\n\n    // Update caret position\n    const updateCaret = (i) => {\n        const scriptElement = document.getElementById(\"scriptBody\");\n        scriptElement.focus();\n        scriptElement.setSelectionRange(i, i);\n    };\n\n    // Handle tags input change\n    const tagsInputChange = (e) => {\n        const { value } = e.target;\n        setTagsInput(value);\n    };\n\n    // Handle enter key on tags\n    const handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            const { value } = e.target;\n            if (!tags.includes(value) && value.length > 0) {\n                setTags([\n                    ...tags, value\n                ]);\n                setTagsInput(\"\");\n            }\n        }\n    };\n\n    // Delete tag\n    const deleteTag = async (value) => {\n        setTags(tags.filter(tag => tag !== value));\n    };\n\n    // Form validation\n    const validate = () => {\n        let required = [script.title, script.description, script.timeline, script.body];\n        for (const i of required) {\n            if (i == null || i.length < 1) return false;\n        }\n        return true;\n    };\n\n    // Create script\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        if (!validate()) return;\n        try {\n            const response = await fetch(\n                `http://localhost:8000/scripts/edit/${script.id}`,\n                {\n                    method: \"PUT\",\n                    headers: { \"Content-Type\": \"application/json\" },\n                    body: JSON.stringify(script)\n                }\n            );\n            navigate(\"/scripts\");\n        } catch (error) {\n            console.error(error.message);\n        }\n    };\n\n    useEffect(() => {\n        setScript({\n            ...script,\n            tags: tags,\n        });\n    }, [tags]);\n\n    return (\n        <form>\n            <div className=\"m-6 mb-0 bg-white rounded-lg border dark:border-gray-700 dark:bg-gray-800\">\n                <h5 className=\"m-3 text-2xl font-semibold tracking-tight text-gray-900 dark:text-white\">Edit Script</h5>\n            </div>\n            <div className=\"p-6\">\n                <div className=\"mb-4\">\n                    <label className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Title</label>\n                    <input type=\"text\" name=\"title\" value={script.title || \"\"} onChange={inputChange} className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" required />\n                </div>\n                <div className=\"mb-4\">\n                    <label className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Description</label>\n                    <input type=\"text\" name=\"description\" value={script.description || \"\"} onChange={inputChange} className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" required />\n                </div>\n                <div className=\"mb-4\">\n                    <label className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Timeline</label>\n                    <input type=\"date\" name=\"timeline\" value={script.timeline || \"\"} onChange={inputChange} className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" required />\n                </div>\n                <div className=\"mb-4\">\n                    <label className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Tags (optional)</label>\n                    <input type=\"text\" name=\"tags\" value={tagsInput || \"\"} onChange={tagsInputChange} onKeyDown={handleKeyDown} className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" required />\n                    <p className=\"mt-2 text-sm text-gray-500 dark:text-gray-400\">Click 'Enter' to add tags.</p>\n                    {tags.map((tag) => (\n                        <Tag key={tag} value={tag} onDelete={deleteTag} />\n                    ))}\n                </div>\n                <div>\n                    <label className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-400\">Script</label>\n                    <textarea id=\"scriptBody\" type=\"text\" name=\"body\" value={script.body} onChange={inputChange} rows={4} className=\"block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" placeholder=\"Write your script here...\" required />\n                </div>\n                {fieldNames.map((field) => (\n                    <button key={field} onClick={handleField} type=\"button\" className=\"mt-2 mr-2 inline-flex items-center bg-blue-100 hover:bg-blue-200 text-blue-800 text-sm font-medium px-1.5 py-0.5 rounded dark:bg-blue-200 dark:text-blue-800 dark:hover:bg-blue-300\">\n                        {field}\n                    </button>\n                ))}\n            </div>\n\n            <div className=\"pl-6 pb-6\">\n                <button type=\"button\" onClick={onSubmit} className=\"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\">Save</button>\n                <Link to=\"/scripts\">\n                    <button type=\"reset\" className=\"absolute right-6 text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900\">Cancel</button>\n                </Link>\n            </div>\n        </form>\n    );\n}\n\nexport default EditScript;\n","/Users/albertqi/Desktop/Directory/CampusContact/client/src/components/Sidebar.js",[],[],"/Users/albertqi/Desktop/Directory/CampusContact/client/src/pages/SidebarContainer.js",[],[],"/Users/albertqi/Desktop/Directory/CampusContact/client/src/pages/TurfSheet.js",[],[],"/Users/albertqi/Desktop/Directory/CampusContact/client/src/components/TableCell.js",[],[],{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":2,"column":8,"nodeType":"152","messageId":"153","endLine":2,"endColumn":14},{"ruleId":"150","severity":1,"message":"154","line":10,"column":8,"nodeType":"152","messageId":"153","endLine":10,"endColumn":14},{"ruleId":"146","replacedBy":"155"},{"ruleId":"148","replacedBy":"156"},{"ruleId":"150","severity":1,"message":"157","line":32,"column":15,"nodeType":"152","messageId":"153","endLine":32,"endColumn":23},{"ruleId":"158","severity":1,"message":"159","line":61,"column":27,"nodeType":"160","endLine":61,"endColumn":101},{"ruleId":"150","severity":1,"message":"157","line":23,"column":13,"nodeType":"152","messageId":"153","endLine":23,"endColumn":21},{"ruleId":"150","severity":1,"message":"161","line":9,"column":5,"nodeType":"152","messageId":"153","endLine":9,"endColumn":15},{"ruleId":"150","severity":1,"message":"157","line":28,"column":13,"nodeType":"152","messageId":"153","endLine":28,"endColumn":21},{"ruleId":"150","severity":1,"message":"157","line":89,"column":19,"nodeType":"152","messageId":"153","endLine":89,"endColumn":27},{"ruleId":"162","severity":1,"message":"163","line":108,"column":8,"nodeType":"164","endLine":108,"endColumn":14,"suggestions":"165"},{"ruleId":"150","severity":1,"message":"166","line":6,"column":11,"nodeType":"152","messageId":"153","endLine":6,"endColumn":19},{"ruleId":"150","severity":1,"message":"167","line":9,"column":20,"nodeType":"152","messageId":"153","endLine":9,"endColumn":29},{"ruleId":"150","severity":1,"message":"157","line":29,"column":19,"nodeType":"152","messageId":"153","endLine":29,"endColumn":27},{"ruleId":"162","severity":1,"message":"168","line":100,"column":8,"nodeType":"164","endLine":100,"endColumn":22,"suggestions":"169"},{"ruleId":"162","severity":1,"message":"168","line":104,"column":8,"nodeType":"164","endLine":104,"endColumn":18,"suggestions":"170"},{"ruleId":"150","severity":1,"message":"171","line":2,"column":10,"nodeType":"152","messageId":"153","endLine":2,"endColumn":21},{"ruleId":"150","severity":1,"message":"172","line":2,"column":23,"nodeType":"152","messageId":"153","endLine":2,"endColumn":34},{"ruleId":"150","severity":1,"message":"157","line":24,"column":23,"nodeType":"152","messageId":"153","endLine":24,"endColumn":31},{"ruleId":"158","severity":1,"message":"173","line":60,"column":33,"nodeType":"160","endLine":60,"endColumn":176},{"ruleId":"158","severity":1,"message":"173","line":71,"column":33,"nodeType":"160","endLine":71,"endColumn":177},{"ruleId":"146","replacedBy":"174"},{"ruleId":"148","replacedBy":"175"},{"ruleId":"150","severity":1,"message":"157","line":93,"column":19,"nodeType":"152","messageId":"153","endLine":93,"endColumn":27},{"ruleId":"162","severity":1,"message":"163","line":112,"column":8,"nodeType":"164","endLine":112,"endColumn":14,"suggestions":"176"},"no-native-reassign",["177"],"no-negated-in-lhs",["178"],"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'Footer' is defined but never used.",["177"],["178"],"'response' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'class_year' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'script'. Either include it or remove the dependency array. You can also do a functional update 'setScript(s => ...)' if you only need 'script' in the 'setScript' call.","ArrayExpression",["179"],"'navigate' is assigned a value but never used.","'setScript' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'updateBody'. Either include it or remove the dependency array.",["180"],["181"],"'useNavigate' is defined but never used.","'useLocation' is defined but never used.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",["177"],["178"],["182"],"no-global-assign","no-unsafe-negation",{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"183","fix":"189"},"Update the dependencies array to be: [script, tags]",{"range":"190","text":"191"},"Update the dependencies array to be: [contactIndex, updateBody]",{"range":"192","text":"193"},"Update the dependencies array to be: [contacts, updateBody]",{"range":"194","text":"195"},{"range":"196","text":"191"},[3301,3307],"[script, tags]",[3648,3662],"[contactIndex, updateBody]",[3717,3727],"[contacts, updateBody]",[3490,3496]]