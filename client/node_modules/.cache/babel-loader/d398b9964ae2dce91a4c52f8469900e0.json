{"ast":null,"code":"import { lastItemOf, stringToArray, isInRange } from './lib/utils.js';\nimport { today } from './lib/date.js';\nimport { parseDate, formatDate } from './lib/date-format.js';\nimport { registerListeners, unregisterListeners } from './lib/event.js';\nimport { locales } from './i18n/base-locales.js';\nimport defaultOptions from './options/defaultOptions.js';\nimport processOptions from './options/processOptions.js';\nimport Picker from './picker/Picker.js';\nimport { triggerDatepickerEvent } from './events/functions.js';\nimport { onKeydown, onFocus, onMousedown, onClickInput, onPaste } from './events/inputFieldListeners.js';\nimport { onClickOutside } from './events/otherListeners.js';\n\nfunction stringifyDates(dates, config) {\n  return dates.map(dt => formatDate(dt, config.format, config.locale)).join(config.dateDelimiter);\n} // parse input dates and create an array of time values for selection\n// returns undefined if there are no valid dates in inputDates\n// when origDates (current selection) is passed, the function works to mix\n// the input dates into the current selection\n\n\nfunction processInputDates(datepicker, inputDates) {\n  let clear = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const {\n    config,\n    dates: origDates,\n    rangepicker\n  } = datepicker;\n\n  if (inputDates.length === 0) {\n    // empty input is considered valid unless origiDates is passed\n    return clear ? [] : undefined;\n  }\n\n  const rangeEnd = rangepicker && datepicker === rangepicker.datepickers[1];\n  let newDates = inputDates.reduce((dates, dt) => {\n    let date = parseDate(dt, config.format, config.locale);\n\n    if (date === undefined) {\n      return dates;\n    }\n\n    if (config.pickLevel > 0) {\n      // adjust to 1st of the month/Jan 1st of the year\n      // or to the last day of the monh/Dec 31st of the year if the datepicker\n      // is the range-end picker of a rangepicker\n      const dt = new Date(date);\n\n      if (config.pickLevel === 1) {\n        date = rangeEnd ? dt.setMonth(dt.getMonth() + 1, 0) : dt.setDate(1);\n      } else {\n        date = rangeEnd ? dt.setFullYear(dt.getFullYear() + 1, 0, 0) : dt.setMonth(0, 1);\n      }\n    }\n\n    if (isInRange(date, config.minDate, config.maxDate) && !dates.includes(date) && !config.datesDisabled.includes(date) && !config.daysOfWeekDisabled.includes(new Date(date).getDay())) {\n      dates.push(date);\n    }\n\n    return dates;\n  }, []);\n\n  if (newDates.length === 0) {\n    return;\n  }\n\n  if (config.multidate && !clear) {\n    // get the synmetric difference between origDates and newDates\n    newDates = newDates.reduce((dates, date) => {\n      if (!origDates.includes(date)) {\n        dates.push(date);\n      }\n\n      return dates;\n    }, origDates.filter(date => !newDates.includes(date)));\n  } // do length check always because user can input multiple dates regardless of the mode\n\n\n  return config.maxNumberOfDates && newDates.length > config.maxNumberOfDates ? newDates.slice(config.maxNumberOfDates * -1) : newDates;\n} // refresh the UI elements\n// modes: 1: input only, 2, picker only, 3 both\n\n\nfunction refreshUI(datepicker) {\n  let mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  let quickRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const {\n    config,\n    picker,\n    inputField\n  } = datepicker;\n\n  if (mode & 2) {\n    const newView = picker.active ? config.pickLevel : config.startView;\n    picker.update().changeView(newView).render(quickRender);\n  }\n\n  if (mode & 1 && inputField) {\n    inputField.value = stringifyDates(datepicker.dates, config);\n  }\n}\n\nfunction setDate(datepicker, inputDates, options) {\n  let {\n    clear,\n    render,\n    autohide\n  } = options;\n\n  if (render === undefined) {\n    render = true;\n  }\n\n  if (!render) {\n    autohide = false;\n  } else if (autohide === undefined) {\n    autohide = datepicker.config.autohide;\n  }\n\n  const newDates = processInputDates(datepicker, inputDates, clear);\n\n  if (!newDates) {\n    return;\n  }\n\n  if (newDates.toString() !== datepicker.dates.toString()) {\n    datepicker.dates = newDates;\n    refreshUI(datepicker, render ? 3 : 1);\n    triggerDatepickerEvent(datepicker, 'changeDate');\n  } else {\n    refreshUI(datepicker, 1);\n  }\n\n  if (autohide) {\n    datepicker.hide();\n  }\n}\n/**\n * Class representing a date picker\n */\n\n\nexport default class Datepicker {\n  /**\n   * Create a date picker\n   * @param  {Element} element - element to bind a date picker\n   * @param  {Object} [options] - config options\n   * @param  {DateRangePicker} [rangepicker] - DateRangePicker instance the\n   * date picker belongs to. Use this only when creating date picker as a part\n   * of date range picker\n   */\n  constructor(element) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let rangepicker = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n    element.datepicker = this;\n    this.element = element; // set up config\n\n    const config = this.config = Object.assign({\n      buttonClass: options.buttonClass && String(options.buttonClass) || 'button',\n      container: document.body,\n      defaultViewDate: today(),\n      maxDate: undefined,\n      minDate: undefined\n    }, processOptions(defaultOptions, this));\n    this._options = options;\n    Object.assign(config, processOptions(options, this)); // configure by type\n\n    const inline = this.inline = element.tagName !== 'INPUT';\n    let inputField;\n    let initialDates;\n\n    if (inline) {\n      config.container = element;\n      initialDates = stringToArray(element.dataset.date, config.dateDelimiter);\n      delete element.dataset.date;\n    } else {\n      const container = options.container ? document.querySelector(options.container) : null;\n\n      if (container) {\n        config.container = container;\n      }\n\n      inputField = this.inputField = element;\n      inputField.classList.add('datepicker-input');\n      initialDates = stringToArray(inputField.value, config.dateDelimiter);\n    }\n\n    if (rangepicker) {\n      // check validiry\n      const index = rangepicker.inputs.indexOf(inputField);\n      const datepickers = rangepicker.datepickers;\n\n      if (index < 0 || index > 1 || !Array.isArray(datepickers)) {\n        throw Error('Invalid rangepicker object.');\n      } // attach itaelf to the rangepicker here so that processInputDates() can\n      // determine if this is the range-end picker of the rangepicker while\n      // setting inital values when pickLevel > 0\n\n\n      datepickers[index] = this; // add getter for rangepicker\n\n      Object.defineProperty(this, 'rangepicker', {\n        get() {\n          return rangepicker;\n        }\n\n      });\n    } // set initial dates\n\n\n    this.dates = []; // process initial value\n\n    const inputDateValues = processInputDates(this, initialDates);\n\n    if (inputDateValues && inputDateValues.length > 0) {\n      this.dates = inputDateValues;\n    }\n\n    if (inputField) {\n      inputField.value = stringifyDates(this.dates, config);\n    }\n\n    const picker = this.picker = new Picker(this);\n\n    if (inline) {\n      this.show();\n    } else {\n      // set up event listeners in other modes\n      const onMousedownDocument = onClickOutside.bind(null, this);\n      const listeners = [[inputField, 'keydown', onKeydown.bind(null, this)], [inputField, 'focus', onFocus.bind(null, this)], [inputField, 'mousedown', onMousedown.bind(null, this)], [inputField, 'click', onClickInput.bind(null, this)], [inputField, 'paste', onPaste.bind(null, this)], [document, 'mousedown', onMousedownDocument], [document, 'touchstart', onMousedownDocument], [window, 'resize', picker.place.bind(picker)]];\n      registerListeners(this, listeners);\n    }\n  }\n  /**\n   * Format Date object or time value in given format and language\n   * @param  {Date|Number} date - date or time value to format\n   * @param  {String|Object} format - format string or object that contains\n   * toDisplay() custom formatter, whose signature is\n   * - args:\n   *   - date: {Date} - Date instance of the date passed to the method\n   *   - format: {Object} - the format object passed to the method\n   *   - locale: {Object} - locale for the language specified by `lang`\n   * - return:\n   *     {String} formatted date\n   * @param  {String} [lang=en] - language code for the locale to use\n   * @return {String} formatted date\n   */\n\n\n  static formatDate(date, format, lang) {\n    return formatDate(date, format, lang && locales[lang] || locales.en);\n  }\n  /**\n   * Parse date string\n   * @param  {String|Date|Number} dateStr - date string, Date object or time\n   * value to parse\n   * @param  {String|Object} format - format string or object that contains\n   * toValue() custom parser, whose signature is\n   * - args:\n   *   - dateStr: {String|Date|Number} - the dateStr passed to the method\n   *   - format: {Object} - the format object passed to the method\n   *   - locale: {Object} - locale for the language specified by `lang`\n   * - return:\n   *     {Date|Number} parsed date or its time value\n   * @param  {String} [lang=en] - language code for the locale to use\n   * @return {Number} time value of parsed date\n   */\n\n\n  static parseDate(dateStr, format, lang) {\n    return parseDate(dateStr, format, lang && locales[lang] || locales.en);\n  }\n  /**\n   * @type {Object} - Installed locales in `[languageCode]: localeObject` format\n   * en`:_English (US)_ is pre-installed.\n   */\n\n\n  static get locales() {\n    return locales;\n  }\n  /**\n   * @type {Boolean} - Whether the picker element is shown. `true` whne shown\n   */\n\n\n  get active() {\n    return !!(this.picker && this.picker.active);\n  }\n  /**\n   * @type {HTMLDivElement} - DOM object of picker element\n   */\n\n\n  get pickerElement() {\n    return this.picker ? this.picker.element : undefined;\n  }\n  /**\n   * Set new values to the config options\n   * @param {Object} options - config options to update\n   */\n\n\n  setOptions(options) {\n    const picker = this.picker;\n    const newOptions = processOptions(options, this);\n    Object.assign(this._options, options);\n    Object.assign(this.config, newOptions);\n    picker.setOptions(newOptions);\n    refreshUI(this, 3);\n  }\n  /**\n   * Show the picker element\n   */\n\n\n  show() {\n    if (this.inputField) {\n      if (this.inputField.disabled) {\n        return;\n      }\n\n      if (this.inputField !== document.activeElement) {\n        this._showing = true;\n        this.inputField.focus();\n        delete this._showing;\n      }\n    }\n\n    this.picker.show();\n  }\n  /**\n   * Hide the picker element\n   * Not available on inline picker\n   */\n\n\n  hide() {\n    if (this.inline) {\n      return;\n    }\n\n    this.picker.hide();\n    this.picker.update().changeView(this.config.startView).render();\n  }\n  /**\n   * Destroy the Datepicker instance\n   * @return {Detepicker} - the instance destroyed\n   */\n\n\n  destroy() {\n    this.hide();\n    unregisterListeners(this);\n    this.picker.detach();\n\n    if (!this.inline) {\n      this.inputField.classList.remove('datepicker-input');\n    }\n\n    delete this.element.datepicker;\n    return this;\n  }\n  /**\n   * Get the selected date(s)\n   *\n   * The method returns a Date object of selected date by default, and returns\n   * an array of selected dates in multidate mode. If format string is passed,\n   * it returns date string(s) formatted in given format.\n   *\n   * @param  {String} [format] - Format string to stringify the date(s)\n   * @return {Date|String|Date[]|String[]} - selected date(s), or if none is\n   * selected, empty array in multidate mode and untitled in sigledate mode\n   */\n\n\n  getDate() {\n    let format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n    const callback = format ? date => formatDate(date, format, this.config.locale) : date => new Date(date);\n\n    if (this.config.multidate) {\n      return this.dates.map(callback);\n    }\n\n    if (this.dates.length > 0) {\n      return callback(this.dates[0]);\n    }\n  }\n  /**\n   * Set selected date(s)\n   *\n   * In multidate mode, you can pass multiple dates as a series of arguments\n   * or an array. (Since each date is parsed individually, the type of the\n   * dates doesn't have to be the same.)\n   * The given dates are used to toggle the select status of each date. The\n   * number of selected dates is kept from exceeding the length set to\n   * maxNumberOfDates.\n   *\n   * With clear: true option, the method can be used to clear the selection\n   * and to replace the selection instead of toggling in multidate mode.\n   * If the option is passed with no date arguments or an empty dates array,\n   * it works as \"clear\" (clear the selection then set nothing), and if the\n   * option is passed with new dates to select, it works as \"replace\" (clear\n   * the selection then set the given dates)\n   *\n   * When render: false option is used, the method omits re-rendering the\n   * picker element. In this case, you need to call refresh() method later in\n   * order for the picker element to reflect the changes. The input field is\n   * refreshed always regardless of this option.\n   *\n   * When invalid (unparsable, repeated, disabled or out-of-range) dates are\n   * passed, the method ignores them and applies only valid ones. In the case\n   * that all the given dates are invalid, which is distinguished from passing\n   * no dates, the method considers it as an error and leaves the selection\n   * untouched.\n   *\n   * @param {...(Date|Number|String)|Array} [dates] - Date strings, Date\n   * objects, time values or mix of those for new selection\n   * @param {Object} [options] - function options\n   * - clear: {boolean} - Whether to clear the existing selection\n   *     defualt: false\n   * - render: {boolean} - Whether to re-render the picker element\n   *     default: true\n   * - autohide: {boolean} - Whether to hide the picker element after re-render\n   *     Ignored when used with render: false\n   *     default: config.autohide\n   */\n\n\n  setDate() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    const dates = [...args];\n    const opts = {};\n    const lastArg = lastItemOf(args);\n\n    if (typeof lastArg === 'object' && !Array.isArray(lastArg) && !(lastArg instanceof Date) && lastArg) {\n      Object.assign(opts, dates.pop());\n    }\n\n    const inputDates = Array.isArray(dates[0]) ? dates[0] : dates;\n    setDate(this, inputDates, opts);\n  }\n  /**\n   * Update the selected date(s) with input field's value\n   * Not available on inline picker\n   *\n   * The input field will be refreshed with properly formatted date string.\n   *\n   * @param  {Object} [options] - function options\n   * - autohide: {boolean} - whether to hide the picker element after refresh\n   *     default: false\n   */\n\n\n  update() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n    if (this.inline) {\n      return;\n    }\n\n    const opts = {\n      clear: true,\n      autohide: !!(options && options.autohide)\n    };\n    const inputDates = stringToArray(this.inputField.value, this.config.dateDelimiter);\n    setDate(this, inputDates, opts);\n  }\n  /**\n   * Refresh the picker element and the associated input field\n   * @param {String} [target] - target item when refreshing one item only\n   * 'picker' or 'input'\n   * @param {Boolean} [forceRender] - whether to re-render the picker element\n   * regardless of its state instead of optimized refresh\n   */\n\n\n  refresh() {\n    let target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n    let forceRender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (target && typeof target !== 'string') {\n      forceRender = target;\n      target = undefined;\n    }\n\n    let mode;\n\n    if (target === 'picker') {\n      mode = 2;\n    } else if (target === 'input') {\n      mode = 1;\n    } else {\n      mode = 3;\n    }\n\n    refreshUI(this, mode, !forceRender);\n  }\n  /**\n   * Enter edit mode\n   * Not available on inline picker or when the picker element is hidden\n   */\n\n\n  enterEditMode() {\n    if (this.inline || !this.picker.active || this.editMode) {\n      return;\n    }\n\n    this.editMode = true;\n    this.inputField.classList.add('in-edit', 'border-blue-700');\n  }\n  /**\n   * Exit from edit mode\n   * Not available on inline picker\n   * @param  {Object} [options] - function options\n   * - update: {boolean} - whether to call update() after exiting\n   *     If false, input field is revert to the existing selection\n   *     default: false\n   */\n\n\n  exitEditMode() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n    if (this.inline || !this.editMode) {\n      return;\n    }\n\n    const opts = Object.assign({\n      update: false\n    }, options);\n    delete this.editMode;\n    this.inputField.classList.remove('in-edit', 'border-blue-700');\n\n    if (opts.update) {\n      this.update(opts);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/albertqi/Desktop/Directory/CampusContact/client/node_modules/@themesberg/tailwind-datepicker/js/Datepicker.js"],"names":["lastItemOf","stringToArray","isInRange","today","parseDate","formatDate","registerListeners","unregisterListeners","locales","defaultOptions","processOptions","Picker","triggerDatepickerEvent","onKeydown","onFocus","onMousedown","onClickInput","onPaste","onClickOutside","stringifyDates","dates","config","map","dt","format","locale","join","dateDelimiter","processInputDates","datepicker","inputDates","clear","origDates","rangepicker","length","undefined","rangeEnd","datepickers","newDates","reduce","date","pickLevel","Date","setMonth","getMonth","setDate","setFullYear","getFullYear","minDate","maxDate","includes","datesDisabled","daysOfWeekDisabled","getDay","push","multidate","filter","maxNumberOfDates","slice","refreshUI","mode","quickRender","picker","inputField","newView","active","startView","update","changeView","render","value","options","autohide","toString","hide","Datepicker","constructor","element","Object","assign","buttonClass","String","container","document","body","defaultViewDate","_options","inline","tagName","initialDates","dataset","querySelector","classList","add","index","inputs","indexOf","Array","isArray","Error","defineProperty","get","inputDateValues","show","onMousedownDocument","bind","listeners","window","place","lang","en","dateStr","pickerElement","setOptions","newOptions","disabled","activeElement","_showing","focus","destroy","detach","remove","getDate","callback","args","opts","lastArg","pop","refresh","target","forceRender","enterEditMode","editMode","exitEditMode"],"mappings":"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","sourcesContent":["import {lastItemOf, stringToArray, isInRange} from './lib/utils.js';\nimport {today} from './lib/date.js';\nimport {parseDate, formatDate} from './lib/date-format.js';\nimport {registerListeners, unregisterListeners} from './lib/event.js';\nimport {locales} from './i18n/base-locales.js';\nimport defaultOptions from './options/defaultOptions.js';\nimport processOptions from './options/processOptions.js';\nimport Picker from './picker/Picker.js';\nimport {triggerDatepickerEvent} from './events/functions.js';\nimport {onKeydown, onFocus, onMousedown, onClickInput, onPaste} from './events/inputFieldListeners.js';\nimport {onClickOutside} from './events/otherListeners.js';\n\nfunction stringifyDates(dates, config) {\n  return dates\n    .map(dt => formatDate(dt, config.format, config.locale))\n    .join(config.dateDelimiter);\n}\n\n// parse input dates and create an array of time values for selection\n// returns undefined if there are no valid dates in inputDates\n// when origDates (current selection) is passed, the function works to mix\n// the input dates into the current selection\nfunction processInputDates(datepicker, inputDates, clear = false) {\n  const {config, dates: origDates, rangepicker} = datepicker;\n  if (inputDates.length === 0) {\n    // empty input is considered valid unless origiDates is passed\n    return clear ? [] : undefined;\n  }\n\n  const rangeEnd = rangepicker && datepicker === rangepicker.datepickers[1];\n  let newDates = inputDates.reduce((dates, dt) => {\n    let date = parseDate(dt, config.format, config.locale);\n    if (date === undefined) {\n      return dates;\n    }\n    if (config.pickLevel > 0) {\n      // adjust to 1st of the month/Jan 1st of the year\n      // or to the last day of the monh/Dec 31st of the year if the datepicker\n      // is the range-end picker of a rangepicker\n      const dt = new Date(date);\n      if (config.pickLevel === 1) {\n        date = rangeEnd\n          ? dt.setMonth(dt.getMonth() + 1, 0)\n          : dt.setDate(1);\n      } else {\n        date = rangeEnd\n          ? dt.setFullYear(dt.getFullYear() + 1, 0, 0)\n          : dt.setMonth(0, 1);\n      }\n    }\n    if (\n      isInRange(date, config.minDate, config.maxDate)\n      && !dates.includes(date)\n      && !config.datesDisabled.includes(date)\n      && !config.daysOfWeekDisabled.includes(new Date(date).getDay())\n    ) {\n      dates.push(date);\n    }\n    return dates;\n  }, []);\n  if (newDates.length === 0) {\n    return;\n  }\n  if (config.multidate && !clear) {\n    // get the synmetric difference between origDates and newDates\n    newDates = newDates.reduce((dates, date) => {\n      if (!origDates.includes(date)) {\n        dates.push(date);\n      }\n      return dates;\n    }, origDates.filter(date => !newDates.includes(date)));\n  }\n  // do length check always because user can input multiple dates regardless of the mode\n  return config.maxNumberOfDates && newDates.length > config.maxNumberOfDates\n    ? newDates.slice(config.maxNumberOfDates * -1)\n    : newDates;\n}\n\n// refresh the UI elements\n// modes: 1: input only, 2, picker only, 3 both\nfunction refreshUI(datepicker, mode = 3, quickRender = true) {\n  const {config, picker, inputField} = datepicker;\n  if (mode & 2) {\n    const newView = picker.active ? config.pickLevel : config.startView;\n    picker.update().changeView(newView).render(quickRender);\n  }\n  if (mode & 1 && inputField) {\n    inputField.value = stringifyDates(datepicker.dates, config);\n  }\n}\n\nfunction setDate(datepicker, inputDates, options) {\n  let {clear, render, autohide} = options;\n  if (render === undefined) {\n    render = true;\n  }\n  if (!render) {\n    autohide = false;\n  } else if (autohide === undefined) {\n    autohide = datepicker.config.autohide;\n  }\n\n  const newDates = processInputDates(datepicker, inputDates, clear);\n  if (!newDates) {\n    return;\n  }\n  if (newDates.toString() !== datepicker.dates.toString()) {\n    datepicker.dates = newDates;\n    refreshUI(datepicker, render ? 3 : 1);\n    triggerDatepickerEvent(datepicker, 'changeDate');\n  } else {\n    refreshUI(datepicker, 1);\n  }\n  if (autohide) {\n    datepicker.hide();\n  }\n}\n\n/**\n * Class representing a date picker\n */\nexport default class Datepicker {\n  /**\n   * Create a date picker\n   * @param  {Element} element - element to bind a date picker\n   * @param  {Object} [options] - config options\n   * @param  {DateRangePicker} [rangepicker] - DateRangePicker instance the\n   * date picker belongs to. Use this only when creating date picker as a part\n   * of date range picker\n   */\n  constructor(element, options = {}, rangepicker = undefined) {\n    element.datepicker = this;\n    this.element = element;\n\n    // set up config\n    const config = this.config = Object.assign({\n      buttonClass: (options.buttonClass && String(options.buttonClass)) || 'button',\n      container: document.body,\n      defaultViewDate: today(),\n      maxDate: undefined,\n      minDate: undefined,\n    }, processOptions(defaultOptions, this));\n    this._options = options;\n    Object.assign(config, processOptions(options, this));\n\n    // configure by type\n    const inline = this.inline = element.tagName !== 'INPUT';\n    let inputField;\n    let initialDates;\n\n    if (inline) {\n      config.container = element;\n      initialDates = stringToArray(element.dataset.date, config.dateDelimiter);\n      delete element.dataset.date;\n    } else {\n      const container = options.container ? document.querySelector(options.container) : null;\n      if (container) {\n        config.container = container;\n      }\n      inputField = this.inputField = element;\n      inputField.classList.add('datepicker-input');\n      initialDates = stringToArray(inputField.value, config.dateDelimiter);\n    }\n    if (rangepicker) {\n      // check validiry\n      const index = rangepicker.inputs.indexOf(inputField);\n      const datepickers = rangepicker.datepickers;\n      if (index < 0 || index > 1 || !Array.isArray(datepickers)) {\n        throw Error('Invalid rangepicker object.');\n      }\n      // attach itaelf to the rangepicker here so that processInputDates() can\n      // determine if this is the range-end picker of the rangepicker while\n      // setting inital values when pickLevel > 0\n      datepickers[index] = this;\n      // add getter for rangepicker\n      Object.defineProperty(this, 'rangepicker', {\n        get() {\n          return rangepicker;\n        },\n      });\n    }\n\n    // set initial dates\n    this.dates = [];\n    // process initial value\n    const inputDateValues = processInputDates(this, initialDates);\n    if (inputDateValues && inputDateValues.length > 0) {\n      this.dates = inputDateValues;\n    }\n    if (inputField) {\n      inputField.value = stringifyDates(this.dates, config);\n    }\n\n    const picker = this.picker = new Picker(this);\n\n    if (inline) {\n      this.show();\n    } else {\n      // set up event listeners in other modes\n      const onMousedownDocument = onClickOutside.bind(null, this);\n      const listeners = [\n        [inputField, 'keydown', onKeydown.bind(null, this)],\n        [inputField, 'focus', onFocus.bind(null, this)],\n        [inputField, 'mousedown', onMousedown.bind(null, this)],\n        [inputField, 'click', onClickInput.bind(null, this)],\n        [inputField, 'paste', onPaste.bind(null, this)],\n        [document, 'mousedown', onMousedownDocument],\n        [document, 'touchstart', onMousedownDocument],\n        [window, 'resize', picker.place.bind(picker)]\n      ];\n      registerListeners(this, listeners);\n    }\n  }\n\n  /**\n   * Format Date object or time value in given format and language\n   * @param  {Date|Number} date - date or time value to format\n   * @param  {String|Object} format - format string or object that contains\n   * toDisplay() custom formatter, whose signature is\n   * - args:\n   *   - date: {Date} - Date instance of the date passed to the method\n   *   - format: {Object} - the format object passed to the method\n   *   - locale: {Object} - locale for the language specified by `lang`\n   * - return:\n   *     {String} formatted date\n   * @param  {String} [lang=en] - language code for the locale to use\n   * @return {String} formatted date\n   */\n  static formatDate(date, format, lang) {\n    return formatDate(date, format, lang && locales[lang] || locales.en);\n  }\n\n  /**\n   * Parse date string\n   * @param  {String|Date|Number} dateStr - date string, Date object or time\n   * value to parse\n   * @param  {String|Object} format - format string or object that contains\n   * toValue() custom parser, whose signature is\n   * - args:\n   *   - dateStr: {String|Date|Number} - the dateStr passed to the method\n   *   - format: {Object} - the format object passed to the method\n   *   - locale: {Object} - locale for the language specified by `lang`\n   * - return:\n   *     {Date|Number} parsed date or its time value\n   * @param  {String} [lang=en] - language code for the locale to use\n   * @return {Number} time value of parsed date\n   */\n  static parseDate(dateStr, format, lang) {\n    return parseDate(dateStr, format, lang && locales[lang] || locales.en);\n  }\n\n  /**\n   * @type {Object} - Installed locales in `[languageCode]: localeObject` format\n   * en`:_English (US)_ is pre-installed.\n   */\n  static get locales() {\n    return locales;\n  }\n\n  /**\n   * @type {Boolean} - Whether the picker element is shown. `true` whne shown\n   */\n  get active() {\n    return !!(this.picker && this.picker.active);\n  }\n\n  /**\n   * @type {HTMLDivElement} - DOM object of picker element\n   */\n  get pickerElement() {\n    return this.picker ? this.picker.element : undefined;\n  }\n\n  /**\n   * Set new values to the config options\n   * @param {Object} options - config options to update\n   */\n  setOptions(options) {\n    const picker = this.picker;\n    const newOptions = processOptions(options, this);\n    Object.assign(this._options, options);\n    Object.assign(this.config, newOptions);\n    picker.setOptions(newOptions);\n\n    refreshUI(this, 3);\n  }\n\n  /**\n   * Show the picker element\n   */\n  show() {\n    if (this.inputField) {\n      if (this.inputField.disabled) {\n        return;\n      }\n      if (this.inputField !== document.activeElement) {\n        this._showing = true;\n        this.inputField.focus();\n        delete this._showing;\n      }\n    }\n    this.picker.show();\n  }\n\n  /**\n   * Hide the picker element\n   * Not available on inline picker\n   */\n  hide() {\n    if (this.inline) {\n      return;\n    }\n    this.picker.hide();\n    this.picker.update().changeView(this.config.startView).render();\n  }\n\n  /**\n   * Destroy the Datepicker instance\n   * @return {Detepicker} - the instance destroyed\n   */\n  destroy() {\n    this.hide();\n    unregisterListeners(this);\n    this.picker.detach();\n    if (!this.inline) {\n      this.inputField.classList.remove('datepicker-input');\n    }\n    delete this.element.datepicker;\n    return this;\n  }\n\n  /**\n   * Get the selected date(s)\n   *\n   * The method returns a Date object of selected date by default, and returns\n   * an array of selected dates in multidate mode. If format string is passed,\n   * it returns date string(s) formatted in given format.\n   *\n   * @param  {String} [format] - Format string to stringify the date(s)\n   * @return {Date|String|Date[]|String[]} - selected date(s), or if none is\n   * selected, empty array in multidate mode and untitled in sigledate mode\n   */\n  getDate(format = undefined) {\n    const callback = format\n      ? date => formatDate(date, format, this.config.locale)\n      : date => new Date(date);\n\n    if (this.config.multidate) {\n      return this.dates.map(callback);\n    }\n    if (this.dates.length > 0) {\n      return callback(this.dates[0]);\n    }\n  }\n\n  /**\n   * Set selected date(s)\n   *\n   * In multidate mode, you can pass multiple dates as a series of arguments\n   * or an array. (Since each date is parsed individually, the type of the\n   * dates doesn't have to be the same.)\n   * The given dates are used to toggle the select status of each date. The\n   * number of selected dates is kept from exceeding the length set to\n   * maxNumberOfDates.\n   *\n   * With clear: true option, the method can be used to clear the selection\n   * and to replace the selection instead of toggling in multidate mode.\n   * If the option is passed with no date arguments or an empty dates array,\n   * it works as \"clear\" (clear the selection then set nothing), and if the\n   * option is passed with new dates to select, it works as \"replace\" (clear\n   * the selection then set the given dates)\n   *\n   * When render: false option is used, the method omits re-rendering the\n   * picker element. In this case, you need to call refresh() method later in\n   * order for the picker element to reflect the changes. The input field is\n   * refreshed always regardless of this option.\n   *\n   * When invalid (unparsable, repeated, disabled or out-of-range) dates are\n   * passed, the method ignores them and applies only valid ones. In the case\n   * that all the given dates are invalid, which is distinguished from passing\n   * no dates, the method considers it as an error and leaves the selection\n   * untouched.\n   *\n   * @param {...(Date|Number|String)|Array} [dates] - Date strings, Date\n   * objects, time values or mix of those for new selection\n   * @param {Object} [options] - function options\n   * - clear: {boolean} - Whether to clear the existing selection\n   *     defualt: false\n   * - render: {boolean} - Whether to re-render the picker element\n   *     default: true\n   * - autohide: {boolean} - Whether to hide the picker element after re-render\n   *     Ignored when used with render: false\n   *     default: config.autohide\n   */\n  setDate(...args) {\n    const dates = [...args];\n    const opts = {};\n    const lastArg = lastItemOf(args);\n    if (\n      typeof lastArg === 'object'\n      && !Array.isArray(lastArg)\n      && !(lastArg instanceof Date)\n      && lastArg\n    ) {\n      Object.assign(opts, dates.pop());\n    }\n\n    const inputDates = Array.isArray(dates[0]) ? dates[0] : dates;\n    setDate(this, inputDates, opts);\n  }\n\n  /**\n   * Update the selected date(s) with input field's value\n   * Not available on inline picker\n   *\n   * The input field will be refreshed with properly formatted date string.\n   *\n   * @param  {Object} [options] - function options\n   * - autohide: {boolean} - whether to hide the picker element after refresh\n   *     default: false\n   */\n  update(options = undefined) {\n    if (this.inline) {\n      return;\n    }\n\n    const opts = {clear: true, autohide: !!(options && options.autohide)};\n    const inputDates = stringToArray(this.inputField.value, this.config.dateDelimiter);\n    setDate(this, inputDates, opts);\n  }\n\n  /**\n   * Refresh the picker element and the associated input field\n   * @param {String} [target] - target item when refreshing one item only\n   * 'picker' or 'input'\n   * @param {Boolean} [forceRender] - whether to re-render the picker element\n   * regardless of its state instead of optimized refresh\n   */\n  refresh(target = undefined, forceRender = false) {\n    if (target && typeof target !== 'string') {\n      forceRender = target;\n      target = undefined;\n    }\n\n    let mode;\n    if (target === 'picker') {\n      mode = 2;\n    } else if (target === 'input') {\n      mode = 1;\n    } else {\n      mode = 3;\n    }\n    refreshUI(this, mode, !forceRender);\n  }\n\n  /**\n   * Enter edit mode\n   * Not available on inline picker or when the picker element is hidden\n   */\n  enterEditMode() {\n    if (this.inline || !this.picker.active || this.editMode) {\n      return;\n    }\n    this.editMode = true;\n    this.inputField.classList.add('in-edit', 'border-blue-700');\n  }\n\n  /**\n   * Exit from edit mode\n   * Not available on inline picker\n   * @param  {Object} [options] - function options\n   * - update: {boolean} - whether to call update() after exiting\n   *     If false, input field is revert to the existing selection\n   *     default: false\n   */\n  exitEditMode(options = undefined) {\n    if (this.inline || !this.editMode) {\n      return;\n    }\n    const opts = Object.assign({update: false}, options);\n    delete this.editMode;\n    this.inputField.classList.remove('in-edit', 'border-blue-700');\n    if (opts.update) {\n      this.update(opts);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}