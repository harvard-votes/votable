{"ast":null,"code":"import { hasProperty, pushUnique, createTagRepeat } from '../../lib/utils.js';\nimport { dateValue, startOfYearPeriod } from '../../lib/date.js';\nimport { parseHTML } from '../../lib/dom.js';\nimport View from './View.js';\n\nfunction toTitleCase(word) {\n  return [...word].reduce((str, ch, ix) => str += ix ? ch : ch.toUpperCase(), '');\n} // Class representing the years and decades view elements\n\n\nexport default class YearsView extends View {\n  constructor(picker, config) {\n    super(picker, config);\n  }\n\n  init(options) {\n    let onConstruction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (onConstruction) {\n      this.navStep = this.step * 10;\n      this.beforeShowOption = `beforeShow${toTitleCase(this.cellClass)}`;\n      this.grid = this.element;\n      this.element.classList.add(this.name, 'datepicker-grid', 'w-64', 'grid', 'grid-cols-4');\n      this.grid.appendChild(parseHTML(createTagRepeat('span', 12)));\n    }\n\n    super.init(options);\n  }\n\n  setOptions(options) {\n    if (hasProperty(options, 'minDate')) {\n      if (options.minDate === undefined) {\n        this.minYear = this.minDate = undefined;\n      } else {\n        this.minYear = startOfYearPeriod(options.minDate, this.step);\n        this.minDate = dateValue(this.minYear, 0, 1);\n      }\n    }\n\n    if (hasProperty(options, 'maxDate')) {\n      if (options.maxDate === undefined) {\n        this.maxYear = this.maxDate = undefined;\n      } else {\n        this.maxYear = startOfYearPeriod(options.maxDate, this.step);\n        this.maxDate = dateValue(this.maxYear, 11, 31);\n      }\n    }\n\n    if (options[this.beforeShowOption] !== undefined) {\n      const beforeShow = options[this.beforeShowOption];\n      this.beforeShow = typeof beforeShow === 'function' ? beforeShow : undefined;\n    }\n  } // Update view's settings to reflect the viewDate set on the picker\n\n\n  updateFocus() {\n    const viewDate = new Date(this.picker.viewDate);\n    const first = startOfYearPeriod(viewDate, this.navStep);\n    const last = first + 9 * this.step;\n    this.first = first;\n    this.last = last;\n    this.start = first - this.step;\n    this.focused = startOfYearPeriod(viewDate, this.step);\n  } // Update view's settings to reflect the selected dates\n\n\n  updateSelection() {\n    const {\n      dates,\n      rangepicker\n    } = this.picker.datepicker;\n    this.selected = dates.reduce((years, timeValue) => {\n      return pushUnique(years, startOfYearPeriod(timeValue, this.step));\n    }, []);\n\n    if (rangepicker && rangepicker.dates) {\n      this.range = rangepicker.dates.map(timeValue => {\n        if (timeValue !== undefined) {\n          return startOfYearPeriod(timeValue, this.step);\n        }\n      });\n    }\n  } // Update the entire view UI\n\n\n  render() {\n    // refresh disabled years on every render in order to clear the ones added\n    // by beforeShow hook at previous render\n    this.disabled = [];\n    this.picker.setViewSwitchLabel(`${this.first}-${this.last}`);\n    this.picker.setPrevBtnDisabled(this.first <= this.minYear);\n    this.picker.setNextBtnDisabled(this.last >= this.maxYear);\n    Array.from(this.grid.children).forEach((el, index) => {\n      const classList = el.classList;\n      const current = this.start + index * this.step;\n      const date = dateValue(current, 0, 1);\n      el.className = `datepicker-cell hover:bg-gray-100 dark:hover:bg-gray-600 block flex-1 leading-9 border-0 rounded-lg cursor-pointer text-center text-gray-900 dark:text-white font-semibold text-sm ${this.cellClass}`;\n\n      if (this.isMinView) {\n        el.dataset.date = date;\n      }\n\n      el.textContent = el.dataset.year = current;\n\n      if (index === 0) {\n        classList.add('prev');\n      } else if (index === 11) {\n        classList.add('next');\n      }\n\n      if (current < this.minYear || current > this.maxYear) {\n        classList.add('disabled');\n      }\n\n      if (this.range) {\n        const [rangeStart, rangeEnd] = this.range;\n\n        if (current > rangeStart && current < rangeEnd) {\n          classList.add('range');\n        }\n\n        if (current === rangeStart) {\n          classList.add('range-start');\n        }\n\n        if (current === rangeEnd) {\n          classList.add('range-end');\n        }\n      }\n\n      if (this.selected.includes(current)) {\n        classList.add('selected', 'bg-blue-700', 'text-white', 'dark:bg-blue-600', 'dark:text-white');\n        classList.remove('text-gray-900', 'hover:bg-gray-100', 'dark:text-white', 'dark:hover:bg-gray-600');\n      }\n\n      if (current === this.focused) {\n        classList.add('focused', 'bg-gray-100', 'dark:bg-gray-600');\n      }\n\n      if (this.beforeShow) {\n        this.performBeforeHook(el, current, date);\n      }\n    });\n  } // Update the view UI by applying the changes of selected and focused items\n\n\n  refresh() {\n    const [rangeStart, rangeEnd] = this.range || [];\n    this.grid.querySelectorAll('.range, .range-start, .range-end, .selected, .focused').forEach(el => {\n      el.classList.remove('range', 'range-start', 'range-end', 'selected', 'bg-blue-700', 'text-white', 'dark:bg-blue-600', 'dark:text-white', 'focused', 'bg-gray-100', 'dark:bg-gray-600');\n    });\n    Array.from(this.grid.children).forEach(el => {\n      const current = Number(el.textContent);\n      const classList = el.classList;\n\n      if (current > rangeStart && current < rangeEnd) {\n        classList.add('range');\n      }\n\n      if (current === rangeStart) {\n        classList.add('range-start');\n      }\n\n      if (current === rangeEnd) {\n        classList.add('range-end');\n      }\n\n      if (this.selected.includes(current)) {\n        classList.add('selected', 'bg-blue-700', 'text-white', 'dark:bg-blue-600', 'dark:text-white');\n        classList.remove('text-gray-900', 'hover:bg-gray-100', 'dark:text-white', 'dark:hover:bg-gray-600');\n      }\n\n      if (current === this.focused) {\n        classList.add('focused', 'bg-gray-100', 'dark:bg-gray-600');\n      }\n    });\n  } // Update the view UI by applying the change of focused item\n\n\n  refreshFocus() {\n    const index = Math.round((this.focused - this.start) / this.step);\n    this.grid.querySelectorAll('.focused').forEach(el => {\n      el.classList.remove('focused', 'bg-gray-100', 'dark:bg-gray-600');\n    });\n    this.grid.children[index].classList.add('focused', 'bg-gray-100', 'dark:bg-gray-600');\n  }\n\n}","map":{"version":3,"sources":["/Users/albertqi/Desktop/Directory/CampusContact/client/node_modules/@themesberg/tailwind-datepicker/js/picker/views/YearsView.js"],"names":["hasProperty","pushUnique","createTagRepeat","dateValue","startOfYearPeriod","parseHTML","View","toTitleCase","word","reduce","str","ch","ix","toUpperCase","YearsView","constructor","picker","config","init","options","onConstruction","navStep","step","beforeShowOption","cellClass","grid","element","classList","add","name","appendChild","setOptions","minDate","undefined","minYear","maxDate","maxYear","beforeShow","updateFocus","viewDate","Date","first","last","start","focused","updateSelection","dates","rangepicker","datepicker","selected","years","timeValue","range","map","render","disabled","setViewSwitchLabel","setPrevBtnDisabled","setNextBtnDisabled","Array","from","children","forEach","el","index","current","date","className","isMinView","dataset","textContent","year","rangeStart","rangeEnd","includes","remove","performBeforeHook","refresh","querySelectorAll","Number","refreshFocus","Math","round"],"mappings":"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","sourcesContent":["import {hasProperty, pushUnique, createTagRepeat} from '../../lib/utils.js';\nimport {dateValue, startOfYearPeriod} from '../../lib/date.js';\nimport {parseHTML} from '../../lib/dom.js';\nimport View from './View.js';\n\nfunction toTitleCase(word) {\n  return [...word].reduce((str, ch, ix) => str += ix ? ch : ch.toUpperCase(), '');\n}\n\n// Class representing the years and decades view elements\nexport default class YearsView extends View {\n  constructor(picker, config) {\n    super(picker, config);\n  }\n\n  init(options, onConstruction = true) {\n    if (onConstruction) {\n      this.navStep = this.step * 10;\n      this.beforeShowOption = `beforeShow${toTitleCase(this.cellClass)}`;\n      this.grid = this.element;\n      this.element.classList.add(this.name, 'datepicker-grid', 'w-64', 'grid', 'grid-cols-4');\n      this.grid.appendChild(parseHTML(createTagRepeat('span', 12)));\n    }\n    super.init(options);\n  }\n\n  setOptions(options) {\n    if (hasProperty(options, 'minDate')) {\n      if (options.minDate === undefined) {\n        this.minYear = this.minDate = undefined;\n      } else {\n        this.minYear = startOfYearPeriod(options.minDate, this.step);\n        this.minDate = dateValue(this.minYear, 0, 1);\n      }\n    }\n    if (hasProperty(options, 'maxDate')) {\n      if (options.maxDate === undefined) {\n        this.maxYear = this.maxDate = undefined;\n      } else {\n        this.maxYear = startOfYearPeriod(options.maxDate, this.step);\n        this.maxDate = dateValue(this.maxYear, 11, 31);\n      }\n    }\n    if (options[this.beforeShowOption] !== undefined) {\n      const beforeShow = options[this.beforeShowOption];\n      this.beforeShow = typeof beforeShow === 'function' ? beforeShow : undefined;\n    }\n  }\n\n  // Update view's settings to reflect the viewDate set on the picker\n  updateFocus() {\n    const viewDate = new Date(this.picker.viewDate);\n    const first = startOfYearPeriod(viewDate, this.navStep);\n    const last = first + 9 * this.step;\n\n    this.first = first;\n    this.last = last;\n    this.start = first - this.step;\n    this.focused = startOfYearPeriod(viewDate, this.step);\n  }\n\n  // Update view's settings to reflect the selected dates\n  updateSelection() {\n    const {dates, rangepicker} = this.picker.datepicker;\n    this.selected = dates.reduce((years, timeValue) => {\n      return pushUnique(years, startOfYearPeriod(timeValue, this.step));\n    }, []);\n    if (rangepicker && rangepicker.dates) {\n      this.range = rangepicker.dates.map(timeValue => {\n        if (timeValue !== undefined) {\n          return startOfYearPeriod(timeValue, this.step);\n        }\n      });\n    }\n  }\n\n  // Update the entire view UI\n  render() {\n    // refresh disabled years on every render in order to clear the ones added\n    // by beforeShow hook at previous render\n    this.disabled = [];\n\n    this.picker.setViewSwitchLabel(`${this.first}-${this.last}`);\n    this.picker.setPrevBtnDisabled(this.first <= this.minYear);\n    this.picker.setNextBtnDisabled(this.last >= this.maxYear);\n\n    Array.from(this.grid.children).forEach((el, index) => {\n      const classList = el.classList;\n      const current = this.start + (index * this.step);\n      const date = dateValue(current, 0, 1);\n\n      el.className = `datepicker-cell hover:bg-gray-100 dark:hover:bg-gray-600 block flex-1 leading-9 border-0 rounded-lg cursor-pointer text-center text-gray-900 dark:text-white font-semibold text-sm ${this.cellClass}`;\n      if (this.isMinView) {\n        el.dataset.date = date;\n      }\n      el.textContent = el.dataset.year = current;\n\n      if (index === 0) {\n        classList.add('prev');\n      } else if (index === 11) {\n        classList.add('next');\n      }\n      if (current < this.minYear || current > this.maxYear) {\n        classList.add('disabled');\n      }\n      if (this.range) {\n        const [rangeStart, rangeEnd] = this.range;\n        if (current > rangeStart && current < rangeEnd) {\n          classList.add('range');\n        }\n        if (current === rangeStart) {\n          classList.add('range-start');\n        }\n        if (current === rangeEnd) {\n          classList.add('range-end');\n        }\n      }\n      if (this.selected.includes(current)) {\n        classList.add('selected', 'bg-blue-700', 'text-white', 'dark:bg-blue-600', 'dark:text-white');\n        classList.remove('text-gray-900', 'hover:bg-gray-100', 'dark:text-white', 'dark:hover:bg-gray-600');\n      }\n      if (current === this.focused) {\n        classList.add('focused', 'bg-gray-100', 'dark:bg-gray-600');\n      }\n\n      if (this.beforeShow) {\n        this.performBeforeHook(el, current, date);\n      }\n    });\n  }\n\n  // Update the view UI by applying the changes of selected and focused items\n  refresh() {\n    const [rangeStart, rangeEnd] = this.range || [];\n    this.grid\n      .querySelectorAll('.range, .range-start, .range-end, .selected, .focused')\n      .forEach((el) => {\n        el.classList.remove('range', 'range-start', 'range-end', 'selected', 'bg-blue-700', 'text-white', 'dark:bg-blue-600', 'dark:text-white', 'focused', 'bg-gray-100', 'dark:bg-gray-600');\n      });\n    Array.from(this.grid.children).forEach((el) => {\n      const current = Number(el.textContent);\n      const classList = el.classList;\n      if (current > rangeStart && current < rangeEnd) {\n        classList.add('range');\n      }\n      if (current === rangeStart) {\n        classList.add('range-start');\n      }\n      if (current === rangeEnd) {\n        classList.add('range-end');\n      }\n      if (this.selected.includes(current)) {\n        classList.add('selected', 'bg-blue-700', 'text-white', 'dark:bg-blue-600', 'dark:text-white');\n        classList.remove('text-gray-900', 'hover:bg-gray-100', 'dark:text-white', 'dark:hover:bg-gray-600');\n      }\n      if (current === this.focused) {\n        classList.add('focused', 'bg-gray-100', 'dark:bg-gray-600');\n      }\n    });\n  }\n\n  // Update the view UI by applying the change of focused item\n  refreshFocus() {\n    const index = Math.round((this.focused - this.start) / this.step);\n    this.grid.querySelectorAll('.focused').forEach((el) => {\n      el.classList.remove('focused', 'bg-gray-100', 'dark:bg-gray-600');\n    });\n    this.grid.children[index].classList.add('focused', 'bg-gray-100', 'dark:bg-gray-600');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}